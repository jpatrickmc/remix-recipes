// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String   @id @default(cuid())
  email String   @unique
  firstName String 
  lastName String

  pantryShelves PantryShelf[]
  pantryItems PantryItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PantryShelf {
  id String @id @default(cuid())
  name String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // these are foreign key relationships
  // there is a relation from PantryShelf to User called user and you can find the
  // corresponding user by looking at the userId field in PantryShelf and the id field
  // in User
  // the user that owns this shelf
  // the userId field in PantryShelf references the id field in User
  user User @relation(fields: [userId], references: [id])
  // list of PantryItems that belong to this shelf
  items PantryItem[]
}

model PantryItem {
  id String @id @default(cuid())
  name String

 // matches the type of id in PantryShelf
 // this tells us which shelf the item belongs to
  shelfId String

  // matches the type of id in User
  // this tells us which user the item belongs to
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // these are foreign key relationships
  // there is a relation from PantryItem to PantryShelf called shelf and you can find the 
  // corresponding shelf by looking at the shelfId field in PantryItem and the id field 
  // in PantryShelf 
  // onDelete: Cascade means, If a shelf is deleted, all items that belong to that shelf 
  // will also be deleted
  shelf PantryShelf @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}